// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QubitSDK
import CommonCrypto
import CoreData
import CoreFoundation
import Foundation
import Security
import Swift
import SystemConfiguration
import UIKit
@objc public class QBLookupEntity : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class QBEvent : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class QBMetaEvent : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class QBContextEvent : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class QBSessionEvent : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class QBLastEvent : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public enum PlacementMode : Swift.String {
  case live
  case sample
  case preview
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc final public class QBPlacementEntity : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc(Content) final public var content: [Swift.String : Any]?
  final public var impressionUrl: Swift.String?
  final public var clickthroughUrl: Swift.String?
  final public var asDictionary: [Swift.String : Any] {
    get
  }
  @objc final public func encode(with coder: Foundation.NSCoder)
  @objc public init?(coder: Foundation.NSCoder)
  public init(with content: [Swift.String : Any]? = nil, clickthroughUrl: Swift.String? = nil, impressionUrl: Swift.String? = nil)
  public init(withDict dict: [Swift.String : Any]) throws
  @objc(clickthrough) final public func clickthrough()
  @objc(impression) final public func impression()
  @objc deinit
  @objc override dynamic public init()
}
final public class QBPlacementEntityCallback {
  public init(clickthroughUrl: Swift.String? = nil, impressionUrl: Swift.String? = nil)
  @objc(clickthrough) final public func clickthrough()
  @objc(impression) final public func impression()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class QubitSDK : ObjectiveC.NSObject {
  public static var trackingId: Swift.String
  public static var deviceId: Swift.String {
    get
  }
  @objc(startWithTrackingId:logLevel:) public class func start(withTrackingId id: Swift.String, logLevel: QBLogLevel = QBLogLevel.disabled)
  @objc(enable:) public class func enableTracker(enable: Swift.Bool)
  @objc(sendEventWithType:data:) public class func sendEvent(type: Swift.String, data: Swift.String)
  @objc(sendEventWithType:dictionary:) public class func sendEvent(type: Swift.String, dictionary: [Swift.String : Any])
  @objc(sendEventWithEvent:) public class func sendEvent(event: Any?)
  @objc(createEventWithType:data:) public class func createEvent(type: Swift.String, data: Swift.String) -> Swift.AnyObject?
  @objc(createEventWithType:dictionary:) public class func createEvent(type: Swift.String, dictionary: [Swift.String : Any]) -> Swift.AnyObject?
  @objc(stopTracking) public class func stopTracking()
  @objc(fetchExperiencesWithIds:onSuccess:onError:preview:variation:ignoreSegments:) public class func fetchExperiences(withIds ids: [Swift.Int], onSuccess: @escaping ([QBExperienceEntity]) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void, preview: Swift.Bool = false, ignoreSegments: Swift.Bool = false, variation: Foundation.NSNumber? = nil)
  @objc(getPlacementWithId:mode:attributes:campaignId:experienceId:onSuccess:onError:) public class func getPlacement(with id: Swift.String, mode: Swift.String? = nil, attributes: Swift.String? = nil, campaignId: Swift.String? = nil, experienceId: Swift.String? = nil, onSuccess: @escaping (QBPlacementEntity) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void)
  @objc(getLookupData) public class func getLookupData() -> QBLookupEntity?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class QBTrackerInit : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class QBTrackerManager : ObjectiveC.NSObject {
  @available(*, deprecated, message: "will be removed in next version")
  @objc public static let sharedManager: QBTrackerManager
  @available(*, unavailable, message: "this method is unavailable at new version of SDK, please use [QubitSDK startWithTrackingId:logLevel:]/start(withTrackingId)")
  @objc(setTrackingId:) public func setTrackingId(trackingId: Swift.String)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(setDebugEndpoint:) public func setDebugEndpoint(endPointUrl: Swift.String)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK, please use [QubitSDK stopTracking]/stopTracking()")
  @objc(unsubscribeToTracking) public func unsubscribeToTracking()
  @available(*, unavailable, message: "this method is unavailable at new version of SDK, please use [QubitSDK startWithTrackingId:logLevel:]/start(withTrackingId)")
  @objc(subscribeToTracking) public func subscribeToTracking()
  @available(*, deprecated, message: "will be removed in next version of SDK, please use [QubitSDK sendEventWithType:dictionary:]/sendEvent(type,dictionary)")
  @objc(dispatchEvent:withData:) public func dispatchEvent(type: Swift.String, withData: [Swift.String : Any])
  @available(*, deprecated, message: "will be removed in next version of SDK, please use [QubitSDK sendEventWithType:data:]/sendEvent(type,data)")
  @objc(dispatchEvent:withStringData:) public func dispatchEvent(type: Swift.String, withStringData: Swift.String)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(dispatchSessionEvent:withEnd:) public func dispatchSessionEvent(startTimeStamp: Foundation.TimeInterval, withEnd: Foundation.TimeInterval)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(getUserID) public func getUserID() -> Swift.String
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(setStashInfo:key:withCallback:) public func setStashInfo(data: Swift.String, key: Swift.String, withCallback: (Swift.Int) -> Swift.Void)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(setStashInfo:withCallback:) public func setStashInfo(key: Swift.String, withCallback: (Swift.Int, Swift.String) -> Swift.Void)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(setStashInfoMultiple:withCallback:) public func setStashInfoMultiple(userkeys: [Swift.String], withCallback: (Swift.Int, [Swift.String : Any]) -> Swift.Void)
  @available(*, unavailable, message: "this method is unavailable at new version of SDK")
  @objc(getSegmentMembershipInfo:withCallback:) public func getSegmentMembershipInfo(userId: Swift.String, withCallback: (Swift.Int, [Swift.String]) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
@available(*, unavailable, message: "this method is unavailable at new version of SDK")
public let qubit: QBTrackerManager
@objc public enum QBLogLevel : Swift.Int {
  case disabled
  case error
  case info
  case debug
  case verbose
  case warning
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class QBExperienceEntity : ObjectiveC.NSObject, Foundation.NSCoding {
  final public let isControl: Swift.Bool
  final public let experienceId: Swift.Int
  final public let variationId: Swift.Int
  @objc(payload) final public let payload: [Swift.String : Any]
  final public var asDictionary: [Swift.String : Any] {
    get
  }
  @objc final public func encode(with aCoder: Foundation.NSCoder)
  @objc convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
extension QBExperienceEntity {
  @objc(shown) final public func shown()
}
@objc final public class QBExperienceEntityCallback : ObjectiveC.NSObject {
  public init(callback: Swift.String)
  @objc(shown) final public func shown()
  @objc deinit
  @objc override dynamic public init()
}
extension PlacementMode : Swift.Equatable {}
extension PlacementMode : Swift.Hashable {}
extension PlacementMode : Swift.RawRepresentable {}
extension QBLogLevel : Swift.Equatable {}
extension QBLogLevel : Swift.Hashable {}
extension QBLogLevel : Swift.RawRepresentable {}
