<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "0930"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "42F0CD4D1F4AEE2B00BD9010"
               BuildableName = "QubitSDK.framework"
               BlueprintName = "QubitSDK"
               ReferencedContainer = "container:QubitSDK.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "42F0CD4D1F4AEE2B00BD9010"
            BuildableName = "QubitSDK.framework"
            BlueprintName = "QubitSDK"
            ReferencedContainer = "container:QubitSDK.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "42F0CD4D1F4AEE2B00BD9010"
            BuildableName = "QubitSDK.framework"
            BlueprintName = "QubitSDK"
            ReferencedContainer = "container:QubitSDK.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#####################################################################################################################&#10;# COPY THIS SCRIPT TO THE POST-ACTIONS SCRIPT IN THE SCHEMA&apos;S ARCHIVE CONFIGURATION TO CREATE A UNIVERSAL FRAMEWORK #&#10;#####################################################################################################################&#10;&#10;#!/bin/sh&#10;&#10;######################&#10;# Globals&#10;######################a&#10;&#10;# Avilable Platforms/Architectures&#10;# macosx | iphoneos | iphonesimulator | appletvos | appletvsimulator | watchos | watchsimulator&#10;DEVICE_ARCH=&quot;iphoneos&quot;&#10;DEVICE_SIM_ARCH=&quot;iphonesimulator&quot;&#10;&#10;FRAMEWORK_NAME=&quot;${PROJECT_NAME}&quot;&#10;DEVICE_LIBRARY_PATH=${BUILD_DIR}/${CONFIGURATION}-${DEVICE_ARCH}/${FRAMEWORK_NAME}.framework&#10;SIMULATOR_LIBRARY_PATH=${BUILD_DIR}/${CONFIGURATION}-${DEVICE_SIM_ARCH}/${FRAMEWORK_NAME}.framework&#10;UNIVERSAL_LIBRARY_DIR=${BUILD_DIR}/${CONFIGURATION}-Universal&#10;SUCCESS=true&#10;EXIT_MESSAGE=$?&#10;ROW_STRING=&quot;\n##################################################################\n&quot;&#10;&#10;echoPaths()&#10;{&#10;    echo &quot;${ROW_STRING}&quot;&#10;    echo &quot;DEVICE_LIBRARY_PATH: ${DEVICE_LIBRARY_PATH}&quot;&#10;    echo &quot;SIMULATOR_LIBRARY_PATH: ${SIMULATOR_LIBRARY_PATH}&quot;&#10;    echo &quot;UNIVERSAL_LIBRARY_DIR: ${UNIVERSAL_LIBRARY_DIR}&quot;&#10;    echo &quot;${ROW_STRING}&quot;&#10;}&#10;&#10;checkSuccess()&#10;{&#10;    if [[ -z $EXIT_MESSAGE ]]; then&#10;        SUCCESS=false&#10;        exitWithMessage&#10;        exit 1&#10;    fi&#10;}&#10;&#10;exitWithMessage()&#10;{&#10;    echo &quot;${ROW_STRING}&quot;&#10;&#10;    if [ &quot;$SUCCESS&quot; = true ] ; then&#10;        echo &quot;\n\n\n &#x1f3c1; Completed with Success! &#x1f642;&quot;&#10;    else&#10;        echo &quot;\n\n\n &#x1f631; Completed with Errors! Please check line above for details:&quot;&#10;        echo &quot;${EXIT_MESSAGE}&quot;&#10;    fi&#10;&#10;    open /tmp/${FRAMEWORK_NAME}_archive.log&#10;    echo &quot;\n &#x1f50d; For more details you can always check the /tmp/${FRAMEWORK_NAME}_archive.log file. &#x1f4dd; \n\n\n&quot;&#10;    echo &quot;${ROW_STRING}&quot;&#10;}&#10;&#10;######################&#10;######################&#10;######################&#10;&#10;&#10;&#10;######################&#10;# Starting the logging&#10;######################&#10;&#10;exec &gt; /tmp/${FRAMEWORK_NAME}_archive.log 2&gt;&amp;1&#10;echo &quot;\n &#x23f1; Starting the Universal Framework work... \n\n\n&quot;&#10;&#10;######################&#10;# Echo the PATHS&#10;######################&#10;&#10;echoPaths&#10;&#10;######################&#10;# Make sure the output directory exists&#10;######################&#10;&#10;mkdir -p &quot;${UNIVERSAL_LIBRARY_DIR}&quot;&#10;&#10;######################&#10;# Step 1: Build Frameworks&#10;######################&#10;&#10;echo &quot;${ROW_STRING}&quot;&#10;echo &quot;\n\n\n &#x1f680; Step 1-1: Building for ${DEVICE_SIM_ARCH}&quot;&#10;echo &quot;${ROW_STRING}&quot;&#10;&#10;EXIT_MESSAGE=&quot;$(xcodebuild BITCODE_GENERATION_MODE=bitcode OTHER_CFLAGS=&quot;-fembed-bitcode&quot; -project &quot;${PROJECT_FILE_PATH}&quot; -scheme &quot;${TARGET_NAME}&quot; -configuration ${CONFIGURATION} -sdk ${DEVICE_SIM_ARCH} ONLY_DEVICE_ARCH=NO ARCHS=&apos;i386 x86_64&apos; BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build)&quot;&#10;&#10;checkSuccess&#10;&#10;echo &quot;${ROW_STRING}&quot;&#10;echo &quot;\n\n\n &#x1f680; Step 1-2: Building for ${DEVICE_ARCH} \n\n\n&quot;&#10;&#10;EXIT_MESSAGE=&quot;$(xcodebuild BITCODE_GENERATION_MODE=bitcode OTHER_CFLAGS=&quot;-fembed-bitcode&quot; -project &quot;${PROJECT_FILE_PATH}&quot; -scheme &quot;${TARGET_NAME}&quot; ONLY_DEVICE_ARCH=NO -configuration ${CONFIGURATION} -sdk ${DEVICE_ARCH}  ARCHS=&apos;arm64 armv7 armv7s&apos; BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot;)&quot;&#10;&#10;checkSuccess&#10;&#10;&#10;######################&#10;# Step 2. Copy the frameworks&#10;######################&#10;&#10;echo &quot;${ROW_STRING}&quot;&#10;echo &quot;\n\n\n &#x1f4e6; Step 2: Copy the framework structure for ${DEVICE_ARCH}&quot;&#10;echo &quot;${ROW_STRING}&quot;&#10;&#10;cp -R &quot;${BUILD_DIR}/${CONFIGURATION}-${DEVICE_ARCH}/&quot; &quot;${UNIVERSAL_LIBRARY_DIR}/&quot;&#10;&#10;######################&#10;# Step 3. Copy the Swiftmodules.&#10;# This step is necessary only if your project is Swift. For the Swift framework, Swiftmodule needs to be copied in the universal framework.&#10;######################&#10;echo &quot;${ROW_STRING}&quot;&#10;echo &quot;\n\n\n &#x1f4e6; Step 4: Copy the Swiftmodules&quot;&#10;echo &quot;${ROW_STRING}&quot;&#10;&#10;&#10;if [ -d &quot;${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/&quot; ]; then&#10;&#10;cp -Rf ${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/* &quot;${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework/Modules/${FRAMEWORK_NAME}.swiftmodule/&quot; | echo&#10;&#10;else&#10;    echo &quot;&#x2139;&#xfe0f; Couldn&apos;t any Swift module file for SIMULATOR!&quot;&#10;fi&#10;&#10;&#10;if [ -d &quot;${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/&quot; ]; then&#10;&#10;cp -Rf ${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/* &quot;${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework/Modules/${FRAMEWORK_NAME}.swiftmodule/&quot; | echo&#10;&#10;else&#10;    echo &quot;&#x2139;&#xfe0f; Couldn&apos;t any Swift module file for DEVICE!&quot;&#10;fi&#10;&#10;&#10;&#10;&#10;######################&#10;# Step 4. Create the universal binary&#10;######################&#10;&#10;echo &quot;${ROW_STRING}&quot;&#10;echo &quot;\n\n\n &#x1f6e0; Step 3: The LIPO Step&quot;&#10;echo &quot;${ROW_STRING}&quot;&#10;&#10;lipo -create &quot;${SIMULATOR_LIBRARY_PATH}/${FRAMEWORK_NAME}&quot; &quot;${DEVICE_LIBRARY_PATH}/${FRAMEWORK_NAME}&quot; -output &quot;${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework/${FRAMEWORK_NAME}&quot;&#10;&#10;&#10;######################&#10;# Step 5. Remove the existing copy of the Universal framework and copy the framework to the project&apos;s directory&#10;######################&#10;&#10;echo &quot;${ROW_STRING}&quot;&#10;echo &quot;\n\n\n &#x1f69b; Step 5 Copying in the project directory&quot;&#10;echo &quot;${ROW_STRING}&quot;&#10;&#10;UNIVERSAL_LIB_DESTINATION=&quot;${PROJECT_DIR}/../UniversalFramework${CONFIGURATION}/${TARGET_NAME}.framework&quot;&#10;&#10;rm -rf ${UNIVERSAL_LIB_DESTINATION}&#10;&#10;yes | cp -Rf &quot;${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework&quot; ${UNIVERSAL_LIB_DESTINATION}&#10;&#10;###############TEST##########&#10;UNIVERSAL_SWIFT_HEADER=${UNIVERSAL_LIB_DESTINATION}/Headers/${FRAMEWORK_NAME}.h&#10;&#10;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;echo &quot;UNIVERSAL LIB DESTINATION ${UNIVERSAL_LIB_DESTINATION}&quot;&#10;echo &quot;#include &lt;TargetConditionals.h&gt;&quot; &gt;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;echo &quot;#if TARGET_OS_SIMULATOR&quot; &gt;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;cat ${BUILD_DIR}/${CONFIGURATION}-${DEVICE_SIM_ARCH}/${FRAMEWORK_NAME}.framework/Headers/${FRAMEWORK_NAME}.h &gt;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;echo &quot;#else&quot; &gt;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;cat ${BUILD_DIR}/${CONFIGURATION}-${DEVICE_ARCH}/${FRAMEWORK_NAME}.framework/Headers/${FRAMEWORK_NAME}.h &gt;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;echo &quot;#endif&quot; &gt;&gt; ${UNIVERSAL_SWIFT_HEADER}&#10;&#10;####### TEST #############&#10;&#10;######################&#10;# Step 6. Open the project directory&#10;######################&#10;&#10;echo &quot;${ROW_STRING}&quot;&#10;open &quot;${PROJECT_DIR}&quot;&#10;echo &quot;${ROW_STRING}&quot;&#10;&#10;&#10;######################&#10;# Step 7. Open the log file on Console application&#10;######################&#10;&#10;exitWithMessage&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "42F0CD4D1F4AEE2B00BD9010"
                     BuildableName = "QubitSDK.framework"
                     BlueprintName = "QubitSDK"
                     ReferencedContainer = "container:QubitSDK.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
